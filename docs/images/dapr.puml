@startuml

package "Application component specification" as application {
    package "component1" as component1 {
        [network-participant: myNetwork1] as component1_participant_myNetwork1
        [network-participant: myNetwork2] as component1_participant_myNetwork2
        component1_participant_myNetwork1 -[hidden]d- component1_participant_myNetwork2
    }

    package "component2" as component2{
        [network-participant: myNetwork2] as component2_participant_myNetwork2
    }
    ' component1 -[hidden]l- component2
}

package "secret: component1.dapr" as secret_component1_dapr {
    [myNetwork1.yaml] as sn1
    [myNetwork2.yaml] as sn2
    sn1 -[hidden]u- sn2
    sn2 -[hidden]u- sn1
}

package "secret: component2.dapr" as secret_component2_dapr {
    [myNetwork2.yaml]
}
secret_component1_dapr -[hidden]d- secret_component2_dapr


package "network: myNetwork1" as myNetwork1 {
    package "streams" as myNetwork1_streams {
        [myJetstream1] as myNetwork1_jetstream1
        [myJetstream2] as myNetwork1_jetstream2
    }
    package "participants" as myNetwork1_participants {
        [component1] as myNetwork1_component1
    }
}

package "network: myNetwork2" as myNetwork2 {
    package "streams" as myNetwork2_streams {
        [myJetstream1] as myNetwork2_jetstream1
    }
    package "participants" as myNetwork2_participants {
        [component1] as myNetwork2_component1
        [component2] as myNetwork2_component2
    }
}

application --> myNetwork1 : creates
application --> myNetwork2 : creates
myNetwork1 -[hidden]r- myNetwork2
component1_participant_myNetwork1 --> myNetwork1_component1 : registers
component1_participant_myNetwork2 --> myNetwork2_component1 : registers
component2_participant_myNetwork2 --> myNetwork2_component2 : registers
secret_component1_dapr <-u- myNetwork1 : creates
secret_component2_dapr <-u- myNetwork2 : creates


@enduml
